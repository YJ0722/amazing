[싱글톤 패턴]

0. 생성(Creational) 패턴
    - 객체 생성에 관련된 패턴
    - 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공한다.


1. 싱글톤 패턴이란?
    - 객체의 인스턴스가 하나만 생기는 패턴

public class Singleton {

    // 클래스 내에서 클래스 생성해야 한다.
    private static Singleton instance = new Singleton();
    
    private Singleton() {
        // 생성자는 외부에서 호출못하게 private 으로 지정해야 한다.
    }

    public static Singleton getInstance() {
        return instance;
    }

    public void say() {
        System.out.println("hi, there");
    }
}


2. 싱글톤 패턴의 이점
    - 메모리 관리가 쉽다 
      오직 하나의 인스턴스만 사용하기 때문에, 메모리 낭비를 방지할 수 있다.
    - 데이터 공유가 쉽다 
      전역으로 사용되는 인스턴스이기 때문에 다른 클래스의 인스턴스들이 접근하여 사용할 수 있다. 
      *동시성 문제 주의

3. 싱글톤 패턴의 단점
    - 멀티스레드 환경에서 발생할 수 있는 동시성 문제를 해결해야한다 -> syncronized 사용 -> 싱글톤 패턴을 구현하는 코드 자체가 길어짐
    - 테스트가 어렵다
      싱글톤 인스턴스는 자원을 공유하기 때문에 분리된 환경에서 테스트 하려면 매번 초기화를 시켜주어야 한다
    - 의존 관계상 클라이언트가 구체 클래스에 의존하게 된다
      new 키워드를 사용하여 클래스 내에서 객체를 생성하고 있으므로 solid 원칙 중 dip 위반
    - 자식 클래스를 만들 수 없다
    - 내부 상태를 변경하기 어렵다 -> 유연성이 떨어짐




<참고> 
https://tecoble.techcourse.co.kr/post/2020-11-07-singleton/
https://gmlwjd9405.github.io/2018/07/06/singleton-pattern.html
