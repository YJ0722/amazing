# Adapter
0. 어댑터 패턴(Adapter Pattern)
 : 한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 변환한다.
 어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.
ex. 한국 표준 플러그를 일본 전원 소켓에 끼우려면 어댑터가 필요
이와 같이 어댑터는 소켓의 인터페이스를 플러그에서 필요로 하는 인터페이스로 바꿔줌

1. 클라이언트에서 어댑터를 사용하는 방법
    1) 클라이언트에서 타겟 인터페이스를 사용하여 메소드를 호출함으로써 어댑터에 요청을 한다.
    2) 어댑터에서는 어댑티 인터페이스를 사용하여 그 요청을 어댑티 에 대한 하나 이상의 메소드를 호출로 변환한다.
    3) 클라이언트에서는 호출 결과를 받긴 하지만 중간에 어댑터가 껴 있는지는 전혀 알지 못한다.

2. 장점
    1) 관게가 없는 인터페이스 간 같이 사용 가능
    2) 프로그램 검사 용이
    3) 클래스 재활용성 증가

3. 어댑터 종류
    1) 객체 어댑터
        - 구성을 통해서 어댑티에 요청을 전달
    2) 클래스 어댑터 : 다중 상속 필요
        - 어댑터를 만들때 타겟과 어댑티 모두의 서브 클래스를 만듦


출처: 
https://jusungpark.tistory.com/22 [정리정리정리]
https://niceman.tistory.com/141
https://dailyheumsi.tistory.com/189